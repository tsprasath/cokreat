apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  namespace: {{ .Values.namespace }}
  labels:
    app: flink
data:
  base-config: |+
    kafka {
      broker-servers = "{{ .Values.kafka_host }}:9092"
      producer.broker-servers = "{{ .Values.kafka_host }}:9092"
      consumer.broker-servers = "{{ .Values.kafka_host }}:9092"
      zookeeper = "{{ .Values.zookeeper_host }}:2181"
      producer {
        max-request-size = 1572864
        batch.size = 98304
        linger.ms = 10
        compression = "snappy"
      }
      output.system.event.topic = "dev.system.events"
    }
    job {
      env = "dev"
      enable.distributed.checkpointing = false
      statebackend {
        blob {
          storage {
            account = "{{ .Values.cloud_storage_key }}.blob.core.windows.net"
            container = "{{ .Values.cloud_storage_flink_bucketname }}"
            checkpointing.dir = "checkpoint"
          }
        }
        base.url = "wasbs://"${job.statebackend.blob.storage.container}"@"${job.statebackend.blob.storage.account}"/"${job.statebackend.blob.storage.checkpointing.dir} }
    }
    task {
      parallelism = 1
      consumer.parallelism = 1
      checkpointing.compressed = true
      checkpointing.interval = 10
      checkpointing.pause.between.seconds = 3000
      restart-strategy.attempts = 3
      restart-strategy.delay = 30000 # in milli-seconds
    }
  
  
    redis {
    host = {{ .Values.redis_host }}
    port = 6379
    connection {
      max = 2
      idle.min = 1
      idle.max = 2
      minEvictableIdleTimeSeconds = 120
      timeBetweenEvictionRunsSeconds = 300
        }
    }
    lms-cassandra {
    host = {{ .Values.cassandra_host }}
    port = "9042"
    }
  
    neo4j {
    routePath = "bolt://{{ .Values.neo4j_host }}:7687"
    graph = "domain"
    }
  
    es {
      basePath = "{{ .Values.elasticsearch_host }}:9200"
    }
    schema {
      basePath = "{{ .Values.kp_schema_base_path }}"
      supportedVersion = {
        itemset = "2.0"
      }
    }
  
{{ if eq .Release.Name "post-publish-processor" }}
  post-publish-processor: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = dock.content.postpublish.request
      groupId = dock-post-publish-processor-group
      publish.topic = dock.publish.job.request
      qrimage.topic = dock.qrimage.request
      dialcode.context.topic = dock.dialcode.context.job.request
    }
    task {
      consumer.parallelism = 1
      router.parallelism = 1
      shallow_copy.parallelism = 1
      link_dialcode.parallelism = 1
      batch_create.parallelism = 1
      dialcode_context_updater.parallelism = 1
    }
    lms-cassandra {
      keyspace = "sunbird_courses"
      batchTable = "course_batch"
    }

    dialcode-cassandra {
      keyspace = "dialcodes"
      imageTable = "dialcode_images"
    }
    service {
      search.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/search"
      lms.basePath = "http://{{ .Values.nginx_private_ingress_ip }}/lms"
      learning_service.basePath = "http://learning-service.dock.svc.cluster.local:8080/learning-service"
      dial.basePath = "https://{{ .Values.domain }}/dial/"
    }

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m
  {{ end }}

{{ if eq .Release.Name "search-indexer" }}
  search-indexer: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "staging.learning.graph.events"
      error.topic = "staging.learning.events.failed"
      groupId = "staging-search-indexer-group"
    }
    task {
      consumer.parallelism = 1
      router.parallelism = 1
      compositeSearch.parallelism = 1
      dialcodeIndexer.parallelism = 1
      dialcodemetricsIndexer.parallelism = 1
    }
    compositesearch.index.name = "compositesearch"
    dialcode.index.name = "dialcode"
    dailcodemetrics.index.name = "dialcodemetrics"
    restrict.metadata.objectTypes = []
    nested.fields = ["badgeAssertions", "targets", "badgeAssociations", "plugins", "me_totalTimeSpent", "me_totalPlaySessionCount", "me_totalTimeSpentInSec", "batches", "trackable", "credentials", "discussionForum", "provider", "osMetadata", "actions", "transcripts", "accessibility"]
    schema.definition_cache.expiry = 14400
    restrict.objectTypes = ["EventSet", "EventSetImage", "Event", "EventImage", "Questionnaire", "Misconception", "FrameworkType", "Concept", "Misconception", "Language", "Reference", "Dimension", "Method", "Library", "Domain", "Api"]
    ignored.fields=["responseDeclaration", "body", "options", "lastStatusChangedOn", "SYS_INTERNAL_LAST_UPDATED_ON", "sYS_INTERNAL_LAST_UPDATED_ON", "branchingLogic"]

    cloud_storage_type="{{ .Values.cloud_service_provider }}"
    cloud_storage_key="{{ .Values.cloud_storage_key }}"
    cloud_storage_secret="{{ .Values.cloud_storage_secret }}"
    cloud_storage_container="{{ .Values.cloud_storage_content_bucketname }}"

    cloudstorage.metadata.replace_absolute_path=false
    cloudstorage.relative_path_prefix=CONTENT_STORAGE_BASE_PATH
    cloudstorage.read_base_path="https://{{ .Values.cloud_storage_key }}.core.windows.net"
    cloudstorage.write_base_path=["https://{{ .Values.cloud_storage_key }}.core.windows.net","https://obj.dev.sunbird.org"]
    cloudstorage.metadata.list=["appIcon", "artifactUrl", "posterImage", "previewUrl", "thumbnail", "assetsMap", "certTemplate", "itemSetPreviewUrl", "grayScaleAppIcon", "sourceURL", "variants", "downloadUrl", "streamingUrl", "toc_url", "data", "question", "solutions", "editorState", "media", "pdfUrl", "transcripts"]

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m
  {{ end }}


{{ if eq .Release.Name "video-stream-generator" }}
  video-stream-generator: |+
    include file("/data/flink/conf/base-config.conf")
    kafka {
      input.topic = "dock.content.postpublish.request"
      groupId = "dock-video-stream-generator-group"
    }
    task {
      timer.duration = 1800
      consumer.parallelism = 1
      parallelism = 1
      max.retries = 10
    }
    lms-cassandra {
      keyspace = dock_platform_db
      table = "job_request"
    }
    service.content.basePath="http://{{ .Values.nginx_private_ingress_ip }}/content"
    azure {
      location = "centralindia"
      login {
        endpoint="https://login.microsoftonline.com"
      }
      api {
        endpoint="https://management.azure.com"
        version = "2018-07-01"
      }
      transform {
        default = "media_transform_default"
        hls = "media_transform_hls"
      }
      stream {
        base_url=""
        endpoint_name = "default"
        protocol = "Hls"
        policy_name = "Predefined_ClearStreamingOnly"
      }
    }
    azure_tenant=""
    azure_subscription_id=""
    azure_account_name=""
    azure_resource_group_name=""
    azure_token_client_key=""
    azure_token_client_secret=""
    ## CSP Name. e.g: aws or azure
    media_service_type="azure"
    ## AWS Elemental Media Convert Config
    aws {
      region=""
      content_bucket_name=""
      token {
        access_key=""
        access_secret=""
      }
      api {
        endpoint=""
        version="2017-08-29"
      }
      service {
        name="mediaconvert"
        queue=""
        role=""
      }
      stream {
        protocol="Hls"
      }
    }

  flink-conf: |+
    jobmanager.memory.flink.size: 1024m
    taskmanager.memory.flink.size: 1024m
    taskmanager.numberOfTaskSlots: 1
    parallelism.default: 1
    jobmanager.execution.failover-strategy: region
    taskmanager.memory.network.fraction: 0.1
    scheduler-mode: reactive
    heartbeat.timeout: 8000
    heartbeat.interval: 5000
    taskmanager.memory.process.size: 1700m
    jobmanager.memory.process.size: 1600m  
  {{ end }}
  log4j_console_properties: |+
{{ .Values.log4j_console_properties | indent 4 }}
